#[cfg(test)]
mod tests {
  // given a known key and input, ensure all encoders and decoders match 

  // One key that may be used for AES-128
  const KEY: [u8; 16] = [ 
    0x2B, 0x7E, 0x15, 0x16, 
    0x28, 0xAE, 0xD2, 0xA6, 
    0xAB, 0xF7, 0x15, 0x88, 
    0x09, 0xCF, 0x4F, 0x3C
  ];

  // as hex 2b7e151628aed2a6abf7158809cf4f3c

  // verified expanded keys
  // these keys can be used for AES-128, we only use the first 11
  const EXPANDED_KEYS: [[u8; 16]; 11] = [
    [0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c],
    [0xa0, 0xfa, 0xfe, 0x17, 0x88, 0x54, 0x2c, 0xb1, 0x23, 0xa3, 0x39, 0x39, 0x2a, 0x6c, 0x76, 0x05],
    [0xf2, 0xc2, 0x95, 0xf2, 0x7a, 0x96, 0xb9, 0x43, 0x59, 0x35, 0x80, 0x7a, 0x73, 0x59, 0xf6, 0x7f],
    [0x3d, 0x80, 0x47, 0x7d, 0x47, 0x16, 0xfe, 0x3e, 0x1e, 0x23, 0x7e, 0x44, 0x6d, 0x7a, 0x88, 0x3b],
    [0xef, 0x44, 0xa5, 0x41, 0xa8, 0x52, 0x5b, 0x7f, 0xb6, 0x71, 0x25, 0x3b, 0xdb, 0x0b, 0xad, 0x00],
    [0xd4, 0xd1, 0xc6, 0xf8, 0x7c, 0x83, 0x9d, 0x87, 0xca, 0xf2, 0xb8, 0xbc, 0x11, 0xf9, 0x15, 0xbc],
    [0x6d, 0x88, 0xa3, 0x7a, 0x11, 0x0b, 0x3e, 0xfd, 0xdb, 0xf9, 0x86, 0x41, 0xca, 0x00, 0x93, 0xfd],
    [0x4e, 0x54, 0xf7, 0x0e, 0x5f, 0x5f, 0xc9, 0xf3, 0x84, 0xa6, 0x4f, 0xb2, 0x4e, 0xa6, 0xdc, 0x4f],
    [0xea, 0xd2, 0x73, 0x21, 0xb5, 0x8d, 0xba, 0xd2, 0x31, 0x2b, 0xf5, 0x60, 0x7f, 0x8d, 0x29, 0x2f],
    [0xac, 0x77, 0x66, 0xf3, 0x19, 0xfa, 0xdc, 0x21, 0x28, 0xd1, 0x29, 0x41, 0x57, 0x5c, 0x00, 0x6e],
    [0xd0, 0x14, 0xf9, 0xa8, 0xc9, 0xee, 0x25, 0x89, 0xe1, 0x3f, 0x0c, 0xc8, 0xb6, 0x63, 0x0c, 0xa6],
    // [0x47, 0xea, 0xdd, 0xe6, 0x8e, 0x04, 0xf8, 0x6f, 0x6f, 0x3b, 0xf4, 0xa7, 0xd9, 0x58, 0xf8, 0x01],
    // [0xf5, 0xab, 0xa1, 0xd3, 0x7b, 0xaf, 0x59, 0xbc, 0x14, 0x94, 0xad, 0x1b, 0xcd, 0xcc, 0x55, 0x1a],
    // [0x15, 0x57, 0x03, 0x6e, 0x6e, 0xf8, 0x5a, 0xd2, 0x7a, 0x6c, 0xf7, 0xc9, 0xb7, 0xa0, 0xa2, 0xd3],
    // [0xb8, 0x6d, 0x65, 0xc7, 0xd6, 0x95, 0x3f, 0x15, 0xac, 0xf9, 0xc8, 0xdc, 0x1b, 0x59, 0x6a, 0x0f],
  ];

  const FLAT_KEYS: [u8; 176] = [
    0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c,
    0xa0, 0xfa, 0xfe, 0x17, 0x88, 0x54, 0x2c, 0xb1, 0x23, 0xa3, 0x39, 0x39, 0x2a, 0x6c, 0x76, 0x05,
    0xf2, 0xc2, 0x95, 0xf2, 0x7a, 0x96, 0xb9, 0x43, 0x59, 0x35, 0x80, 0x7a, 0x73, 0x59, 0xf6, 0x7f,
    0x3d, 0x80, 0x47, 0x7d, 0x47, 0x16, 0xfe, 0x3e, 0x1e, 0x23, 0x7e, 0x44, 0x6d, 0x7a, 0x88, 0x3b,
    0xef, 0x44, 0xa5, 0x41, 0xa8, 0x52, 0x5b, 0x7f, 0xb6, 0x71, 0x25, 0x3b, 0xdb, 0x0b, 0xad, 0x00,
    0xd4, 0xd1, 0xc6, 0xf8, 0x7c, 0x83, 0x9d, 0x87, 0xca, 0xf2, 0xb8, 0xbc, 0x11, 0xf9, 0x15, 0xbc,
    0x6d, 0x88, 0xa3, 0x7a, 0x11, 0x0b, 0x3e, 0xfd, 0xdb, 0xf9, 0x86, 0x41, 0xca, 0x00, 0x93, 0xfd,
    0x4e, 0x54, 0xf7, 0x0e, 0x5f, 0x5f, 0xc9, 0xf3, 0x84, 0xa6, 0x4f, 0xb2, 0x4e, 0xa6, 0xdc, 0x4f,
    0xea, 0xd2, 0x73, 0x21, 0xb5, 0x8d, 0xba, 0xd2, 0x31, 0x2b, 0xf5, 0x60, 0x7f, 0x8d, 0x29, 0x2f,
    0xac, 0x77, 0x66, 0xf3, 0x19, 0xfa, 0xdc, 0x21, 0x28, 0xd1, 0x29, 0x41, 0x57, 0x5c, 0x00, 0x6e,
    0xd0, 0x14, 0xf9, 0xa8, 0xc9, 0xee, 0x25, 0x89, 0xe1, 0x3f, 0x0c, 0xc8, 0xb6, 0x63, 0x0c, 0xa6,
    // [0x47, 0xea, 0xdd, 0xe6, 0x8e, 0x04, 0xf8, 0x6f, 0x6f, 0x3b, 0xf4, 0xa7, 0xd9, 0x58, 0xf8, 0x01],
    // [0xf5, 0xab, 0xa1, 0xd3, 0x7b, 0xaf, 0x59, 0xbc, 0x14, 0x94, 0xad, 0x1b, 0xcd, 0xcc, 0x55, 0x1a],
    // [0x15, 0x57, 0x03, 0x6e, 0x6e, 0xf8, 0x5a, 0xd2, 0x7a, 0x6c, 0xf7, 0xc9, 0xb7, 0xa0, 0xa2, 0xd3],
    // [0xb8, 0x6d, 0x65, 0xc7, 0xd6, 0x95, 0x3f, 0x15, 0xac, 0xf9, 0xc8, 0xdc, 0x1b, 0x59, 0x6a, 0x0f],
  ];

  // 16 random plaintexts
  const INPUTS: [[u8; 16]; 16] = [
    [0x32, 0x43, 0xF6, 0xA8, 0x88, 0x5A, 0x30, 0x8D, 0x31, 0x31, 0x98, 0xA2, 0xE0, 0x37, 0x07, 0x34],
    [0x5b, 0x92, 0x32, 0xb9, 0xb9, 0x35, 0x98, 0xc4, 0xb5, 0x59, 0xa2, 0xfe, 0xa8, 0x87, 0x23, 0xb5],
    [0x28, 0x04, 0xde, 0xb5, 0xb6, 0x61, 0x71, 0x76, 0x41, 0x95, 0xee, 0x52, 0xd8, 0x3c, 0xa4, 0xee],
    [0x8a, 0xc3, 0x93, 0xc0, 0x52, 0xf5, 0xba, 0xa7, 0xfd, 0x8a, 0x17, 0xd0, 0xe4, 0x48, 0xc3, 0xaf],
    [0x20, 0x6f, 0x67, 0x6f, 0x98, 0x10, 0xe8, 0xc3, 0x51, 0xe9, 0xb3, 0x3b, 0xf6, 0x89, 0xab, 0x9d],
    [0x86, 0x1d, 0x0c, 0xd2, 0xcb, 0x5d, 0x8a, 0x26, 0x1b, 0xec, 0x1b, 0xa3, 0xf4, 0xfd, 0xaf, 0xe1],
    [0xac, 0x2a, 0x63, 0xfa, 0xfa, 0xa0, 0x8d, 0x0c, 0x94, 0x1d, 0xc2, 0x46, 0xad, 0x5c, 0xba, 0x6c],
    [0xfa, 0x5f, 0x5d, 0x5d, 0x36, 0x2c, 0x9f, 0xcb, 0x21, 0xe2, 0x0a, 0x7e, 0xf4, 0xa7, 0xd5, 0x3a],
    [0xBE, 0xD2, 0x34, 0x66, 0xDE, 0xA8, 0x7F, 0x9A, 0x9F, 0xB6, 0xF0, 0x4A, 0x80, 0x5C, 0x94, 0xAD],
    [0xEC, 0x34, 0xCE, 0xA4, 0xD4, 0xEF, 0x47, 0x1A, 0xC3, 0xE4, 0x7A, 0xFB, 0x24, 0x8E, 0x39, 0x5F],
    [0xDB, 0x10, 0xD7, 0x9F, 0x43, 0x0E, 0xF4, 0x41, 0xF6, 0xC8, 0x42, 0x93, 0x05, 0xAD, 0x16, 0x3D],
    [0x1C, 0x6E, 0xE7, 0xAE, 0x08, 0xD3, 0xAD, 0x9F, 0xDE, 0x8F, 0xEC, 0x88, 0x78, 0xCA, 0xC9, 0x0A],
    [0x01, 0x6A, 0xFD, 0x24, 0x8D, 0xF1, 0xDC, 0x74, 0x00, 0xE5, 0x25, 0x39, 0x57, 0x42, 0x1F, 0x75],
    [0xF4, 0x27, 0xAF, 0x23, 0x69, 0x30, 0x4C, 0xB1, 0xC9, 0x65, 0xA9, 0x8C, 0xC4, 0x84, 0x16, 0xCB],
    [0x8B, 0xF5, 0xA3, 0xF6, 0xBF, 0xF0, 0xF0, 0x15, 0x1E, 0xCC, 0x39, 0xFD, 0x56, 0xF3, 0x44, 0x0B],
    [0xA2, 0xA9, 0xE4, 0x9C, 0x27, 0x65, 0xF5, 0x90, 0x12, 0x77, 0x56, 0xAC, 0x18, 0xE1, 0x97, 0x13],

  ];

  // 16 verified ciphertexts for AES-128 with key (10 Rounds of AES)
  const EXPECTED_OUTPUTS: [[u8; 16]; 16] = [
    [0x39, 0x25, 0x84, 0x1D, 0x02, 0xDC, 0x09, 0xFB, 0xDC, 0x11, 0x85, 0x97, 0x19, 0x6A, 0x0B, 0x32],
    [0x97, 0x9E, 0xAD, 0x03, 0x27, 0x10, 0x60, 0x08, 0x7C, 0x29, 0x1D, 0x2E, 0xDC, 0x51, 0x99, 0x8D],
    [0x46, 0x3E, 0x34, 0xF5, 0x84, 0x97, 0x74, 0xA7, 0x49, 0x22, 0xD8, 0xFC, 0x1F, 0x42, 0x4F, 0xCA],
    [0x3A, 0xFE, 0x17, 0xA8, 0x66, 0x17, 0xB4, 0xE7, 0xF4, 0x10, 0x47, 0x24, 0xA9, 0xE9, 0xF3, 0x58],
    [0xED, 0x72, 0xA0, 0x51, 0x8D, 0x8F, 0x38, 0xED, 0x5D, 0xD0, 0xED, 0xF4, 0x2C, 0x5A, 0x9A, 0x24],
    [0x8D, 0xA0, 0x94, 0x92, 0x70, 0x7B, 0x0D, 0x62, 0x1B, 0xF2, 0x8F, 0x4F, 0x21, 0xDE, 0x40, 0xC5],
    [0xBF, 0x21, 0xF9, 0x03, 0xD2, 0x52, 0x8C, 0x6C, 0x9A, 0x91, 0x13, 0x27, 0x5C, 0x6D, 0x36, 0x62],
    [0x8B, 0x61, 0x39, 0x3B, 0xF1, 0x08, 0x03, 0x15, 0xAF, 0x2E, 0x72, 0x45, 0x6F, 0x4C, 0x69, 0xDB],
    [0xC8, 0x05, 0x9C, 0xE4, 0x1A, 0x8E, 0x02, 0xBD, 0xAE, 0xFC, 0x0A, 0x1E, 0x61, 0xC2, 0x9B, 0x82],
    [0x22, 0x72, 0x71, 0x3F, 0xF2, 0x75, 0x0B, 0x4D, 0x85, 0x5A, 0xAB, 0x66, 0x27, 0xE1, 0x46, 0xED],
    [0xCE, 0x15, 0x54, 0x8B, 0x1F, 0x52, 0x11, 0x3C, 0x0E, 0x51, 0x13, 0x50, 0x1A, 0xD0, 0xB4, 0x60],
    [0x1F, 0x3A, 0x4F, 0x6D, 0x6F, 0x65, 0x90, 0xF3, 0x11, 0xB1, 0xDA, 0xC0, 0x41, 0x2D, 0x7E, 0x67],
    [0xB7, 0x31, 0x2E, 0xD2, 0xC2, 0x7E, 0x0B, 0x3C, 0xCE, 0xBD, 0x25, 0xA7, 0x45, 0x1B, 0x7B, 0xB0],
    [0xDB, 0xDF, 0x49, 0x0C, 0xC5, 0x6C, 0x53, 0xF2, 0x8A, 0xB5, 0x60, 0x82, 0x8C, 0x31, 0xDF, 0x9F],
    [0x25, 0x05, 0x57, 0x7F, 0xE0, 0xCC, 0xBB, 0x14, 0x59, 0x40, 0xEB, 0x5F, 0x59, 0xBF, 0xEA, 0xEF],
    [0xCD, 0x18, 0x62, 0xD5, 0xC4, 0x49, 0x24, 0xE7, 0xA2, 0x24, 0x4F, 0xBE, 0xC0, 0xF0, 0x5D, 0x51],
  ];

  // 12 random plaintexts
  const FOUR_FLAT_INPUTS: [u8; 64] = [
    0x32, 0x43, 0xF6, 0xA8, 0x88, 0x5A, 0x30, 0x8D, 0x31, 0x31, 0x98, 0xA2, 0xE0, 0x37, 0x07, 0x34,
    0x5b, 0x92, 0x32, 0xb9, 0xb9, 0x35, 0x98, 0xc4, 0xb5, 0x59, 0xa2, 0xfe, 0xa8, 0x87, 0x23, 0xb5,
    0x28, 0x04, 0xde, 0xb5, 0xb6, 0x61, 0x71, 0x76, 0x41, 0x95, 0xee, 0x52, 0xd8, 0x3c, 0xa4, 0xee,
    0x8a, 0xc3, 0x93, 0xc0, 0x52, 0xf5, 0xba, 0xa7, 0xfd, 0x8a, 0x17, 0xd0, 0xe4, 0x48, 0xc3, 0xaf,
    // 0x20, 0x6f, 0x67, 0x6f, 0x98, 0x10, 0xe8, 0xc3, 0x51, 0xe9, 0xb3, 0x3b, 0xf6, 0x89, 0xab, 0x9d,
    // 0x86, 0x1d, 0x0c, 0xd2, 0xcb, 0x5d, 0x8a, 0x26, 0x1b, 0xec, 0x1b, 0xa3, 0xf4, 0xfd, 0xaf, 0xe1,
    // 0xac, 0x2a, 0x63, 0xfa, 0xfa, 0xa0, 0x8d, 0x0c, 0x94, 0x1d, 0xc2, 0x46, 0xad, 0x5c, 0xba, 0x6c,
    // 0xfa, 0x5f, 0x5d, 0x5d, 0x36, 0x2c, 0x9f, 0xcb, 0x21, 0xe2, 0x0a, 0x7e, 0xf4, 0xa7, 0xd5, 0x3a,
    // 0xBE, 0xD2, 0x34, 0x66, 0xDE, 0xA8, 0x7F, 0x9A, 0x9F, 0xB6, 0xF0, 0x4A, 0x80, 0x5C, 0x94, 0xAD,
    // 0xEC, 0x34, 0xCE, 0xA4, 0xD4, 0xEF, 0x47, 0x1A, 0xC3, 0xE4, 0x7A, 0xFB, 0x24, 0x8E, 0x39, 0x5F,
    // 0xDB, 0x10, 0xD7, 0x9F, 0x43, 0x0E, 0xF4, 0x41, 0xF6, 0xC8, 0x42, 0x93, 0x05, 0xAD, 0x16, 0x3D,
    // 0x1C, 0x6E, 0xE7, 0xAE, 0x08, 0xD3, 0xAD, 0x9F, 0xDE, 0x8F, 0xEC, 0x88, 0x78, 0xCA, 0xC9, 0x0A,
    // 0x01, 0x6A, 0xFD, 0x24, 0x8D, 0xF1, 0xDC, 0x74, 0x00, 0xE5, 0x25, 0x39, 0x57, 0x42, 0x1F, 0x75,
    // 0xF4, 0x27, 0xAF, 0x23, 0x69, 0x30, 0x4C, 0xB1, 0xC9, 0x65, 0xA9, 0x8C, 0xC4, 0x84, 0x16, 0xCB,
    // 0x8B, 0xF5, 0xA3, 0xF6, 0xBF, 0xF0, 0xF0, 0x15, 0x1E, 0xCC, 0x39, 0xFD, 0x56, 0xF3, 0x44, 0x0B,
    // 0xA2, 0xA9, 0xE4, 0x9C, 0x27, 0x65, 0xF5, 0x90, 0x12, 0x77, 0x56, 0xAC, 0x18, 0xE1, 0x97, 0x13,
  ];

  // 12 random plaintexts
  const TWELVE_FLAT_INPUTS: [u8; 192] = [
    0x32, 0x43, 0xF6, 0xA8, 0x88, 0x5A, 0x30, 0x8D, 0x31, 0x31, 0x98, 0xA2, 0xE0, 0x37, 0x07, 0x34,
    0x5b, 0x92, 0x32, 0xb9, 0xb9, 0x35, 0x98, 0xc4, 0xb5, 0x59, 0xa2, 0xfe, 0xa8, 0x87, 0x23, 0xb5,
    0x28, 0x04, 0xde, 0xb5, 0xb6, 0x61, 0x71, 0x76, 0x41, 0x95, 0xee, 0x52, 0xd8, 0x3c, 0xa4, 0xee,
    0x8a, 0xc3, 0x93, 0xc0, 0x52, 0xf5, 0xba, 0xa7, 0xfd, 0x8a, 0x17, 0xd0, 0xe4, 0x48, 0xc3, 0xaf,
    0x20, 0x6f, 0x67, 0x6f, 0x98, 0x10, 0xe8, 0xc3, 0x51, 0xe9, 0xb3, 0x3b, 0xf6, 0x89, 0xab, 0x9d,
    0x86, 0x1d, 0x0c, 0xd2, 0xcb, 0x5d, 0x8a, 0x26, 0x1b, 0xec, 0x1b, 0xa3, 0xf4, 0xfd, 0xaf, 0xe1,
    0xac, 0x2a, 0x63, 0xfa, 0xfa, 0xa0, 0x8d, 0x0c, 0x94, 0x1d, 0xc2, 0x46, 0xad, 0x5c, 0xba, 0x6c,
    0xfa, 0x5f, 0x5d, 0x5d, 0x36, 0x2c, 0x9f, 0xcb, 0x21, 0xe2, 0x0a, 0x7e, 0xf4, 0xa7, 0xd5, 0x3a,
    0xBE, 0xD2, 0x34, 0x66, 0xDE, 0xA8, 0x7F, 0x9A, 0x9F, 0xB6, 0xF0, 0x4A, 0x80, 0x5C, 0x94, 0xAD,
    0xEC, 0x34, 0xCE, 0xA4, 0xD4, 0xEF, 0x47, 0x1A, 0xC3, 0xE4, 0x7A, 0xFB, 0x24, 0x8E, 0x39, 0x5F,
    0xDB, 0x10, 0xD7, 0x9F, 0x43, 0x0E, 0xF4, 0x41, 0xF6, 0xC8, 0x42, 0x93, 0x05, 0xAD, 0x16, 0x3D,
    0x1C, 0x6E, 0xE7, 0xAE, 0x08, 0xD3, 0xAD, 0x9F, 0xDE, 0x8F, 0xEC, 0x88, 0x78, 0xCA, 0xC9, 0x0A,
    // 0x01, 0x6A, 0xFD, 0x24, 0x8D, 0xF1, 0xDC, 0x74, 0x00, 0xE5, 0x25, 0x39, 0x57, 0x42, 0x1F, 0x75,
    // 0xF4, 0x27, 0xAF, 0x23, 0x69, 0x30, 0x4C, 0xB1, 0xC9, 0x65, 0xA9, 0x8C, 0xC4, 0x84, 0x16, 0xCB,
    // 0x8B, 0xF5, 0xA3, 0xF6, 0xBF, 0xF0, 0xF0, 0x15, 0x1E, 0xCC, 0x39, 0xFD, 0x56, 0xF3, 0x44, 0x0B,
    // 0xA2, 0xA9, 0xE4, 0x9C, 0x27, 0x65, 0xF5, 0x90, 0x12, 0x77, 0x56, 0xAC, 0x18, 0xE1, 0x97, 0x13,
  ];

  // 12 verified ciphertexts for AES-128 with key (10 Rounds of AES)
  const FLAT_EXPECTED_OUTPUTS: [u8; 192] = [
    0x39, 0x25, 0x84, 0x1D, 0x02, 0xDC, 0x09, 0xFB, 0xDC, 0x11, 0x85, 0x97, 0x19, 0x6A, 0x0B, 0x32,
    0x97, 0x9E, 0xAD, 0x03, 0x27, 0x10, 0x60, 0x08, 0x7C, 0x29, 0x1D, 0x2E, 0xDC, 0x51, 0x99, 0x8D,
    0x46, 0x3E, 0x34, 0xF5, 0x84, 0x97, 0x74, 0xA7, 0x49, 0x22, 0xD8, 0xFC, 0x1F, 0x42, 0x4F, 0xCA,
    0x3A, 0xFE, 0x17, 0xA8, 0x66, 0x17, 0xB4, 0xE7, 0xF4, 0x10, 0x47, 0x24, 0xA9, 0xE9, 0xF3, 0x58,
    0xED, 0x72, 0xA0, 0x51, 0x8D, 0x8F, 0x38, 0xED, 0x5D, 0xD0, 0xED, 0xF4, 0x2C, 0x5A, 0x9A, 0x24,
    0x8D, 0xA0, 0x94, 0x92, 0x70, 0x7B, 0x0D, 0x62, 0x1B, 0xF2, 0x8F, 0x4F, 0x21, 0xDE, 0x40, 0xC5,
    0xBF, 0x21, 0xF9, 0x03, 0xD2, 0x52, 0x8C, 0x6C, 0x9A, 0x91, 0x13, 0x27, 0x5C, 0x6D, 0x36, 0x62,
    0x8B, 0x61, 0x39, 0x3B, 0xF1, 0x08, 0x03, 0x15, 0xAF, 0x2E, 0x72, 0x45, 0x6F, 0x4C, 0x69, 0xDB,
    0xC8,	0x05,	0x9C,	0xE4,	0x1A,	0x8E,	0x02,	0xBD,	0xAE,	0xFC,	0x0A,	0x1E,	0x61,	0xC2,	0x9B,	0x82,
    0x22,	0x72,	0x71,	0x3F,	0xF2,	0x75,	0x0B,	0x4D,	0x85,	0x5A,	0xAB,	0x66,	0x27,	0xE1,	0x46,	0xED,
    0xCE,	0x15,	0x54,	0x8B,	0x1F,	0x52,	0x11,	0x3C,	0x0E,	0x51,	0x13,	0x50,	0x1A,	0xD0,	0xB4,	0x60,
    0x1F,	0x3A,	0x4F,	0x6D,	0x6F,	0x65,	0x90,	0xF3,	0x11,	0xB1,	0xDA,	0xC0,	0x41,	0x2D,	0x7E,	0x67,
    // 0xB7,	0x31,	0x2E,	0xD2,	0xC2,	0x7E,	0x0B,	0x3C,	0xCE,	0xBD,	0x25,	0xA7,	0x45,	0x1B,	0x7B,	0xB0,
    // 0xDB,	0xDF,	0x49,	0x0C,	0xC5,	0x6C,	0x53,	0xF2,	0x8A,	0xB5,	0x60,	0x82,	0x8C,	0x31,	0xDF,	0x9F,
    // 0x25,	0x05,	0x57,	0x7F,	0xE0,	0xCC,	0xBB,	0x14,	0x59,	0x40,	0xEB,	0x5F,	0x59,	0xBF,	0xEA,	0xEF,
    // 0xCD,	0x18,	0x62,	0xD5,	0xC4,	0x49,	0x24,	0xE7,	0xA2,	0x24,	0x4F,	0xBE,	0xC0,	0xF0,	0x5D,	0x51,
  ];

  use aes_frast::aes_core::{setkey_enc_k128, setkey_dec_k128, block_enc_k128, block_dec_k128};

  #[test]
  /// Test Look-Up-Table (LUT) approach using S-Box and T-Tables
  fn test_lut() {
    let mut scheduled_keys: [u32; 44] = [0; 44];
    let mut ct_output: [u8; 16] = [0; 16];
    let mut pt_output: [u8; 16] = [0; 16];
    
    // test encode
    setkey_enc_k128(&KEY, &mut scheduled_keys);
    block_enc_k128(&INPUTS[0], &mut ct_output, &scheduled_keys);
    assert_eq!(ct_output, EXPECTED_OUTPUTS[0]);

    // test decode
    setkey_dec_k128(&KEY, &mut scheduled_keys);
    block_dec_k128(&ct_output, &mut pt_output, &scheduled_keys);
    assert_eq!(pt_output, INPUTS[0]);
  }

  use aes_soft::block_cipher_trait::generic_array::GenericArray;
  use aes_soft::block_cipher_trait::BlockCipher;

  #[test]
  /// Test bitslice approach using SIMD registers
  fn test_bitslice() {
    let test_key = GenericArray::from_slice(&KEY);
    let mut block = GenericArray::clone_from_slice(&INPUTS[0]);
    let cipher = aes_soft::Aes128::new(&test_key);
    let block_copy = block.clone();
    
    // test encode
    cipher.encrypt_block(&mut block);
    let expected_output = GenericArray::clone_from_slice(&EXPECTED_OUTPUTS[0]);
    assert_eq!(block, expected_output);

    // test decode
    cipher.decrypt_block(&mut block);
    assert_eq!(block, block_copy);
  }

  #[test]
  /// Test bitslice approach using SIMD registers with 8 blocks in parallel
  fn test_bitslice_8() {
    let test_key = GenericArray::from_slice(&KEY);

    let blocks = [
      GenericArray::clone_from_slice(&INPUTS[0]),
      GenericArray::clone_from_slice(&INPUTS[1]),
      GenericArray::clone_from_slice(&INPUTS[2]),
      GenericArray::clone_from_slice(&INPUTS[3]),
      GenericArray::clone_from_slice(&INPUTS[4]),
      GenericArray::clone_from_slice(&INPUTS[5]),
      GenericArray::clone_from_slice(&INPUTS[6]),
      GenericArray::clone_from_slice(&INPUTS[7]),
    ];

    let expected_blocks = [
      GenericArray::clone_from_slice(&EXPECTED_OUTPUTS[0]),
      GenericArray::clone_from_slice(&EXPECTED_OUTPUTS[1]),
      GenericArray::clone_from_slice(&EXPECTED_OUTPUTS[2]),
      GenericArray::clone_from_slice(&EXPECTED_OUTPUTS[3]),
      GenericArray::clone_from_slice(&EXPECTED_OUTPUTS[4]),
      GenericArray::clone_from_slice(&EXPECTED_OUTPUTS[5]),
      GenericArray::clone_from_slice(&EXPECTED_OUTPUTS[6]),
      GenericArray::clone_from_slice(&EXPECTED_OUTPUTS[7]),
    ];

    let mut blocks8 = GenericArray::clone_from_slice(&blocks);
    let expected8 = GenericArray::clone_from_slice(&expected_blocks);
    let cipher = aes_soft::Aes128::new(&test_key);
    let block8_copy = blocks8.clone();

    // test encode
    cipher.encrypt_blocks(&mut blocks8);
    assert_eq!(blocks8, expected8);

    // test decode
    cipher.decrypt_blocks(&mut blocks8);
    assert_eq!(blocks8, block8_copy);
  }

  use aes_benchmarks::*;

  #[test]
  /// Test AES-NI with a single block
  fn test_aes_ni() {

    // test encode
    let block = unsafe { encode_aes_ni_128(EXPANDED_KEYS, INPUTS[0], 1)};
    assert_eq!(block, EXPECTED_OUTPUTS[0]);

    // test decode
    let decoded_block = unsafe { decode_aes_ni_128(EXPANDED_KEYS, block, 1) };
    assert_eq!(decoded_block, INPUTS[0]);
  }

  #[test]
  /// Test AES-NI with four blocks pipelined (best effective throughput on Sky Lake)
  fn test_aes_ni_4() {

    // test encode
    let blocks = unsafe {
       encode_aes_ni_128_pipelined_x4(
         EXPANDED_KEYS, 
         [INPUTS[0], 
         INPUTS[1], 
         INPUTS[2], 
         INPUTS[3]],
         1
        )
      };

    assert_eq!(blocks, [
      EXPECTED_OUTPUTS[0], 
      EXPECTED_OUTPUTS[1], 
      EXPECTED_OUTPUTS[2], 
      EXPECTED_OUTPUTS[3]
    ]);
  }

  #[test]
  // /// Test AES-NI with eight blocks pipelined (best effective throughput on Zen 2)
  fn test_aes_ni_8() {
    // test encode
    let blocks = unsafe {
      encode_aes_ni_128_pipelined_x8(
        EXPANDED_KEYS, 
        [INPUTS[0], 
        INPUTS[1], 
        INPUTS[2], 
        INPUTS[3],
        INPUTS[4],
        INPUTS[5],
        INPUTS[6],
        INPUTS[7]],
        1
       )
     };

   assert_eq!(blocks, [
     EXPECTED_OUTPUTS[0], 
     EXPECTED_OUTPUTS[1], 
     EXPECTED_OUTPUTS[2], 
     EXPECTED_OUTPUTS[3],
     EXPECTED_OUTPUTS[4], 
     EXPECTED_OUTPUTS[5], 
     EXPECTED_OUTPUTS[6], 
     EXPECTED_OUTPUTS[7]
   ]);
  }

  #[test]
  /// Test VAES with 16 blocks pipelined in parallel (best effective throughput on Ice Lake)
  fn test_aes_ni_c() {
    // test encode
    let block = unsafe { encode_aes_ni_c_128(FLAT_KEYS, INPUTS[0], 1)};
    assert_eq!(block, EXPECTED_OUTPUTS[0]);
  }


  #[test]
  /// Test VAES with 16 blocks pipelined in parallel (best effective throughput on Ice Lake)
  fn test_vaes_ni_c() {
    // test encode
    let block = unsafe { encode_vaes_ni_c_512(FLAT_KEYS, FOUR_FLAT_INPUTS, 1)};
    assert!(block.iter().zip(FLAT_EXPECTED_OUTPUTS[0..64].iter()).all(|(a,b)| a == b));
  }

  #[test]
  fn test_vaes_ni_c_x4() {
    // test encode
    let blocks = unsafe { encode_vaes_ni_c_512_x4(FLAT_KEYS, TWELVE_FLAT_INPUTS, 1)};
    for (index, block) in blocks.iter().enumerate() {
      assert!(block.iter().zip(FLAT_EXPECTED_OUTPUTS[index * 64..(index + 1) * 64].iter()).all(|(a,b)| a == b));
    }
  }

  // #[test]
  // fn test_cuda_lut_encode() {

  // }

  // #[test]
  // fn test_cuda_lut_decode() {

  // }

  // #[test]
  // fn test_cuda_bitslice_encode() {

  // }

  // #[test]
  // fn test_cuda_bitslice_decode() {

  // }

  // #[test]
  // fn test_opencl_lut_encode() {

  // }

  // #[test]
  // fn test_opencl_lut_decode() {

  // }

  // #[test]
  // fn test_opencl_bitslice_encode() {

  // }

  // #[test]
  // fn test_opencl_bitslice_decode() {

  // }




}